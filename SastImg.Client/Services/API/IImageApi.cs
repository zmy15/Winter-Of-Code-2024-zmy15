// <auto-generated>
//     This code was generated by Refitter.
// </auto-generated>


using Refit;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using SastImg.Client.Service.API;

#nullable enable annotations

namespace SastImg.Client.Service.API
{
    /// <summary>AddImage</summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.5.0.0")]
    [Headers("Authorization: Bearer")]
    public partial interface IImageApi
    {
        /// <summary>AddImage</summary>
        /// <remarks>Add an new image to the specific album.</remarks>
        /// <param name="albumId">The album id.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// </list>
        /// </returns>
        [Post("/api/albums/{albumId}/add")]
        [Multipart]
        Task<IApiResponse> AddImageAsync([Query] long albumId,string title,StreamPart image,ICollection<long> tags,CancellationToken cancellationToken = default);

        /// <summary>Remove</summary>
        /// <remarks>Remove an image in the specific album.</remarks>
        /// <param name="albumId">The album id.</param>
        /// <param name="imageId">The image id.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// </list>
        /// </returns>
        [Post("/api/albums/{albumId}/images/{imageId}/remove")]
        Task<IApiResponse> RemoveImageAsync(long albumId, long imageId, CancellationToken cancellationToken = default);

        /// <summary>Restore</summary>
        /// <remarks>Restore an image in the specific album.</remarks>
        /// <param name="albumId">The album id.</param>
        /// <param name="imageId">The image id.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// </list>
        /// </returns>
        [Post("/api/albums/{albumId}/images/{imageId}/restore")]
        Task<IApiResponse> RestoreImageAsync(long albumId, long imageId, CancellationToken cancellationToken = default);

        /// <summary>Like</summary>
        /// <remarks>Like an image in the specific album.</remarks>
        /// <param name="albumId">The album id.</param>
        /// <param name="imageId">The image id.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// </list>
        /// </returns>
        [Post("/api/albums/{albumId}/images/{imageId}/like")]
        Task<IApiResponse> LikeImageAsync(long albumId, long imageId, CancellationToken cancellationToken = default);

        /// <summary>Unlike</summary>
        /// <remarks>Unlike an image in the specific album.</remarks>
        /// <param name="albumId">The album id.</param>
        /// <param name="imageId">The image id.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// </list>
        /// </returns>
        [Post("/api/albums/{albumId}/images/{imageId}/unlike")]
        Task<IApiResponse> UnlikeImageAsync(long albumId, long imageId, CancellationToken cancellationToken = default);

        /// <summary>Delete</summary>
        /// <remarks>
        /// Delete a specific image in an album (removed or not) permanently.
        /// 
        /// ** This action is IRREVERSIBLE **
        /// </remarks>
        /// <param name="albumId">The album id.</param>
        /// <param name="imageId">The image id.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// </list>
        /// </returns>
        [Delete("/api/albums/{albumId}/images/{imageId}")]
        Task<IApiResponse> ImagesAsync(long albumId, long imageId, CancellationToken cancellationToken = default);

        /// <summary>GetImage</summary>
        /// <remarks>Get/Search images with specific album or uploader.</remarks>
        /// <param name="uploader">The uploader id.</param>
        /// <param name="album">The album id.</param>
        /// <param name="page">Page index. 50 images per page.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/images")]
        Task<IApiResponse<ICollection<ImageDto>>> GetImagesAsync([Query] long? uploader, [Query] long? album, [Query] int? page, CancellationToken cancellationToken = default);

        /// <summary>GetImage</summary>
        /// <remarks>
        /// Get the image file.
        /// 
        /// Query param [kind]:
        /// 0 - Original File
        /// 1 - Thumbnail
        /// </remarks>
        /// <param name="id">The image id.</param>
        /// <param name="kind">0 - Original File 1 - Thumbnail</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/images/{id}")]
        Task<IApiResponse<Stream>> GetImageAsync(long id, [Query] int? kind, CancellationToken cancellationToken = default);

        /// <summary>GetDetailedImage</summary>
        /// <remarks>Get detailed image info.</remarks>
        /// <param name="id">The image id.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/images/{id}/info")]
        Task<IApiResponse<DetailedImage>> GetDetailedImageAsync(long id, CancellationToken cancellationToken = default);

        /// <summary>GetRemvoedImages</summary>
        /// <remarks>Get removed images in the specific album.</remarks>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/albums/{albumId}/images/removed")]
        Task<IApiResponse<ICollection<ImageDto>>> GetRemovedImagesAsync(long albumId, CancellationToken cancellationToken = default);
    }

}