// <auto-generated>
//     This code was generated by Refitter.
// </auto-generated>


using Refit;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using SastImg.Client.Service.API;

#nullable enable annotations

namespace SastImg.Client.Service.API
{
    /// <summary>CreateAlbum</summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.5.0.0")]
    [Headers("Authorization: Bearer")]
    public partial interface IAlbumApi
    {
        /// <summary>CreateAlbum</summary>
        /// <remarks>Create a new album.</remarks>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Bad Request</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/albums")]
        Task<IApiResponse<int>> CreateAlbumAsync([Body] CreateAlbumRequest body, CancellationToken cancellationToken = default);

        /// <summary>GetAlbums</summary>
        /// <remarks>Get/Search albums with specific category, author or title.</remarks>
        /// <param name="category">The category id.</param>
        /// <param name="author">The author id.</param>
        /// <param name="title">The title.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/albums")]
        Task<IApiResponse<ICollection<AlbumDto>>> GetAlbumsAsync([Query] long? category, [Query] long? author, [Query] string? title, CancellationToken cancellationToken = default);

        /// <summary>RemoveAlbum</summary>
        /// <remarks>
        /// Remove album.
        /// The operation can be restored within a period of time.
        /// </remarks>
        /// <param name="id">The album id.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>204</term>
        /// <description>No Content</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>Not Found</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/albums/{id}/remove")]
        Task<IApiResponse> RemoveAlbumAsync(long id, CancellationToken cancellationToken = default);

        /// <summary>RestoreAlbum</summary>
        /// <remarks>Restore removed album.</remarks>
        /// <param name="id">The removed album id.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>204</term>
        /// <description>No Content</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>Not Found</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/albums/{id}/restore")]
        Task<IApiResponse> RestoreAlbumAsync(long id, CancellationToken cancellationToken = default);

        /// <summary>UpdateAccessLevel</summary>
        /// <remarks>
        /// Update the album access level.
        /// 0 - Private - Only author and collaborators can see.
        /// 1 - AuthReadOnly - Auth users can see, auth users can read.
        /// 2 - AuthReadWrite - Auth users can see, auth users can read & add.
        /// 3 - AuthReadOnly - Everyone can see, auth users can read.
        /// 4 - PublicReadWrite - Everyone can see, auth users can read & add.
        /// </remarks>
        /// <param name="id">The album id.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>204</term>
        /// <description>No Content</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Bad Request</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>Not Found</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/albums/{id}/accessLevel")]
        Task<IApiResponse> UpdateAlbumAccessLevelAsync(long id, [Body] UpdateAccessLevelRequest body, CancellationToken cancellationToken = default);

        /// <summary>UpdateDescription</summary>
        /// <remarks>Update album description.</remarks>
        /// <param name="id">The album id.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>204</term>
        /// <description>No Content</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Bad Request</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>Not Found</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/albums/{id}/description")]
        Task<IApiResponse> UpdateAlbumDescriptionAsync(long id, [Body] UpdateDescriptionRequest body, CancellationToken cancellationToken = default);

        /// <summary>UpdateTitle</summary>
        /// <remarks>Update album title.</remarks>
        /// <param name="id">The album id.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>204</term>
        /// <description>No Content</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Bad Request</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>Not Found</description>
        /// </item>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/albums/{id}/title")]
        Task<IApiResponse> UpdateAlbumTitleAsync(long id, [Body] UpdateTitleRequest body, CancellationToken cancellationToken = default);

        /// <summary>UpdateCollaborators</summary>
        /// <remarks>
        /// Update album's collaborators.
        /// Collaborators can add/remove images in the album.
        /// Max 32.
        /// </remarks>
        /// <param name="id">The album id.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>204</term>
        /// <description>No Content</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Bad Request</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>Not Found</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/albums/{id}/collaborators")]
        Task<IApiResponse> UpdateAlbumCollaboratorsAsync(long id, [Body] UpdateCollaboratorsRequest body, CancellationToken cancellationToken = default);

        /// <summary>UpdateCover</summary>
        /// <remarks>Set the album cover. If NULL, set the latest image in album to be the cover.</remarks>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>204</term>
        /// <description>No Content</description>
        /// </item>
        /// </list>
        /// </returns>
        [Post("/api/albums/{id}/cover")]
        Task<IApiResponse> UpdateAlbumCoverAsync(long id, [Body] Body body, CancellationToken cancellationToken = default);

        /// <summary>GetCover</summary>
        /// <remarks>Get the album cover file.</remarks>
        /// <param name="id">The album id.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/albums/{id}/cover")]
        Task<IApiResponse<FileStreamResult>> GetAlbumCoverAsync(long id, CancellationToken cancellationToken = default);

        /// <summary>Subscribe</summary>
        /// <remarks>
        /// Subscribe an album.
        /// 
        /// When the album is updated, u'll get notifications.
        /// </remarks>
        /// <param name="id">The album id.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// </list>
        /// </returns>
        [Post("/api/albums/{id}/subscribe")]
        Task<IApiResponse> SubscribeAlbumAsync(long id, CancellationToken cancellationToken = default);

        /// <summary>Unsubscribe</summary>
        /// <remarks>Unsubscribe an album.</remarks>
        /// <param name="id">The album id.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// </list>
        /// </returns>
        [Post("/api/albums/{id}/unsubscribe")]
        Task<IApiResponse> UnsubscribeAlbumAsync(long id, CancellationToken cancellationToken = default);

        /// <summary>GetDetailedAlbum</summary>
        /// <remarks>Get detailed album info.</remarks>
        /// <param name="id">The album id.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/albums/{id}")]
        Task<IApiResponse<DetailedAlbum>> GetDetailedAlbumAsync(long id, CancellationToken cancellationToken = default);

        /// <summary>GetRemovedAlbums</summary>
        /// <remarks>Get removed albums.</remarks>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/albums/removed")]
        Task<IApiResponse<ICollection<RemovedAlbumDto>>> GetRemovedAlbumsAsync(CancellationToken cancellationToken = default);
    }

}